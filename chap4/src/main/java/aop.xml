<?xml version="1.0" encoding="UTF-8"?>
<!-- /src/main/java/applicationContext.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	
	 http://www.springframework.org/schema/beans/spring-beans.xsd
	 http://www.springframework.org/schema/context
	 http://www.springframework.org/schema/context/spring-context.xsd 
	 http://www.springframework.org/schema/aop
	  http://www.springframework.org/schema/aop/spring-aop.xsd">
	

	<bean id="write" class="spring.WriteImpl">
		<constructor-arg><ref bean="articelDao"/></constructor-arg>
	</bean>
	<bean id="articelDao" class="spring.MariadbArticelDao"/>
	
	<!--  AOP 설정  -->
	<!--  AspectJ 클래스를 객체화 -->
	<bean id="logging" class="spring.LoggingAspect"/>
	<aop:config> <!--  aop 설정 -->
		<!--  pointcut : 핵심 로직 지정            메서드의 접근제어자, 리턴타입, 스프링 패키지중 impl로 끝나는 어떤 메서드(매개변수갯수 제한 없음)
		스프링 패키지에 속한 클래스중 이름이 *impl로 끝나는 public 메서드  : 리턴타입 상관없음. 매개변수 상관없음 -->
		<aop:pointcut expression="execution(public * spring.*Impl.*(..))" id="servicepointcut"/> <!--  pointcut 핵심 로직 찾음 -->
		<!--  AOP 로 사용될 객체와 pointcut 지정. -->
		<aop:aspect id="loggingAspect" ref="logging"> 
		<!--  advice 지정 
			aop:arund -> 핵심로직의 시작과 끝에 실행됨.
		 -->
			<aop:around method="logging" pointcut-ref="servicepointcut"/> <!--  around 실행 전후에  -->
		</aop:aspect>
	</aop:config>
	<!--  
	
	aop 관련 용어
	
		pointcut : aop 대상이 되는 메서드 설정. 핵심 로직을 지정
		execution(public * spring.*Impl.*(..))
	     public : 메서드의 접근제어자 지정
	      *      : 리턴타입 상관없음
	     spring.*Impl : spring 패키지 내부의 클래스 중 이름이 impl로 끝나는 클래스 
		 *(..) : 메서드 이름 상관없음, 매개변수 상관없음.
		aspect : AOP 로 사용될 객체 설정
			ref = "logging" => 객체의 이름
	    advice : AOP가 실행될 시점
	    	around : 핵심 로직 실행 전과 후 
	    	before : 이전
	    	after : 이후
	    	afterReturning : 정상 종료 이후
	    	afterThrowing : 예외 종료 이후 
	
	 -->
	
</beans>
